spring.application.name=API-gateway
server.port=8082
eureka.instance.prefer-ip-address=true
eureka.client.serviceurl.defaultZone=http://localhost:9014/eureka


#Auth-Services
spring.cloud.gateway.server.webflux.routes[0].id=userauth-services
spring.cloud.gateway.server.webflux.routes[0].uri=lb://userauth-services
spring.cloud.gateway.server.webflux.routes[0].predicates[0]=Path=/auth/**
#spring.cloud.gateway..server.webflux.routes[0].filters[0]=AuthenticationFilter


# Booking Service
spring.cloud.gateway.server.webflux.routes[1].id=car-service
spring.cloud.gateway.server.webflux.routes[1].uri=lb://car-service
spring.cloud.gateway.server.webflux.routes[1].predicates[0]=Path=/api/bookings/**, /api/vehicles/**
spring.cloud.gateway.server.webflux.routes[1].filters[0]=AuthenticationFilter

spring.cloud.gateway.server.webflux.globalcors.add-to-simple-url-handler-mapping=true
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowedOrigins=http://localhost:5173
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowedMethods=GET,POST,PUT,DELETE
spring.cloud.gateway.server.webflux.globalcors.cors-configurations[/**].allowedheaders=*
spring.cloud.gateway.server.webflux.globalcors.cors-configurations[/**].allowedcredentials=true


# Vehicle Service (admin operations) -> forwarding /api/vehicles/** to booking-service (or vehicle service)
#spring.cloud.gateway.server.webflux.routes[2].id=vehicle-service
#spring.cloud.gateway.server.webflux.routes[2].uri=lb://booking-service
#spring.cloud.gateway.server.webflux.routes[2].predicates[0]=Path=/api/vehicles/**
# Strip the first path segment so downstream receives /save, /getAllVehicles, etc.
#spring.cloud.gateway.server.webflux.routes[2].filters[0]=StripPrefix=1
# If you use your AuthenticationFilter as a GatewayFilter factory, enable it:
# spring.cloud.gateway.server.webflux.routes[2].filters[1]=AuthenticationFilter
